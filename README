NAME
    Data::Currency - Container class for currency conversion/formatting

SYNOPSIS
        use Data::Currency;

        my $price = Data::Currency->new(value => 1.2. code => 'USD');
        # or
        my $price = Data::Currency->new(1.2); # defaults to USD
        print $price;            # 1.20 USD
        print $price->code;      # USD
        print $price->format;    # FMT_SYMBOL
        print $price->as_string; # 1.20 USD
        print $price->as_string('FMT_SYMBOL'); # $1.20

DESCRIPTION
    The Data::Currency module provides basic currency formatting:

        my $price = 1.23;
        my $currency = Data::Currency->new($price);

        print $currency->convert('CAD')->as_string;

    Each Data::Currency object will stringify to the original value except
    in string context, where it stringifies to the format specified in
    "format".

CONSTRUCTOR
  new
    Arguments: $price [, $code, $format] || \%options

    To create a new Data::Currency object, simply call "new" and pass in the
    price to be formatted:

        my $currency = Data::Currency->new(10.23);

        my $currency = Data::Currency->new({
            value  => 1.23,
            code   => 'CAD',
            format => 'FMT_SYMBOL',
        });

    You can also pass in the default currency code and/or currency format to
    be used for each instance. If no code or format are supplied, future
    calls to "as_string" and "convert" will use the default format and code
    values.

    The following defaults are set when Data::Currency is loaded:

        value:  0
        code:   USD
        format: FMT_COMMON

ATTRIBUTES
  code
    Gets/sets the three letter currency code for the current currency
    object.

  format
    Gets/sets the format to be used when "as_string" is called. See
    Locale::Currency::Format for the available formatting options.

  name
    Returns the currency name for the current objects currency code. If no
    currency code is set the method will die.

  value
    Returns the original price value given to "new".

METHODS
  clone(%params)
    Clone this Data::Currency object and creates a new one. You may
    optionally specify some of the attributes to overwrite.

      $curr->clone({ value => 100 }); # Clones all fields but changes value to 100

  stringify
    Sames as "as_string".

  as_string
    Returns the current objects value as a formatted currency string.

SEE ALSO
    Locale::Currency, Locale::Currency::Format,
    Finance::Currency::Convert::WebserviceX

AUTHOR
        Christopher H. Laco
        CPAN ID: CLACO
        claco@chrislaco.com
        http://today.icantfocus.com/blog/

